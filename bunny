#! /bin/bash
#
# Copyright (c) 2017-2018 ypsah
# Licensed under MIT (https://github.com/ypsah/bunny/blob/master/LICENSE.txt)
#

PROGNAME="${BASH_SOURCE[0]##*/}"

################################################################################
#                                Configuration                                 #
################################################################################

# This is the pattern used to identify test suites and tests functions
declare -x TEST_PATTERN='^test_'

################################################################################
#                                  Utilities                                   #
################################################################################

# List test functions in the current scope
#
# Example: (source "path/to/test_suite.sh"; list_tests)
list_tests()
{
    declare -F | cut -d' ' -f3 | grep "$TEST_PATTERN"
}

# Compute the path to a logging directory for a given test suite
#
# usage: logdir SUITE
#
# Positional parameter:
#   SUITE   path to a test suite
#
# The computed path is garanteed to be unique to the current run
logdir()
{
    printf '%s/.log/%s/%s' "$(dirname "$1")" "$run_id" "${1##*/}"
}

# Compute a timedelta between two timestamps
#
# usage: elapsed START END
#
# Positional parameters:
#   START       the start timestamp
#   END         the end timestamp
#
# Timestamps may either be integers or decimals (maximum precision: 1ns)
# The result is truncated with a millisecond precision.
elapsed()
{
    local -i start nano_start end nano_end
    local decimal

    shopt -s extglob
    IFS="." read -r start decimal <<< "$1"
    decimal+="000000000"
    decimal="${decimal:0:9}"
    nano_start=${decimal##+(0)}

    IFS="." read -r end decimal <<< "$2"
    decimal+="000000000"
    decimal="${decimal:0:9}"
    nano_end="${decimal##+(0)}"

    # Sanity check START must be greater or equal to END
    ((start < end)) || ((start == end && nano_start < nano_end)) || return 1

    ((nano_end < nano_start)) && ((nano_end+=1000000000, end--))

    local nano_elapsed
    printf -v nano_elapsed '%09i' $((nano_end - nano_start))

    printf '%i.%s' $((end - start)) "${nano_elapsed:0:3}"
}

# Run a single test
#
# usage: run_test TEST
#
# Position parameter:
#   TEST    the name of a test function (must be available in the current scope)
run_test()
{
    local -i start end
    local nano_start nano_end

    printf -v start '%(%s)T' -1
    nano_start="$(date '+%-N')"

    (
    declare -F teardown >/dev/null && trap -- "teardown" EXIT
    if declare -F setup >/dev/null; then
        setup || exit
    fi

    # Hide bunny's trap handlers and run the test
    (trap EXIT; "$1")
    )

    case $? in
    0)
        local status=Passed
        ;;
    75)
        local status=Skipped
        ;;
    *)
        local status=Failed
        ;;
    esac

    printf -v end '%(%s)T' -1
    nano_end="$(date '+%-N')"

    printf '\n%s in ' "$status"
    elapsed "$start.$nano_start" "$end.$nano_end"
    printf 's\n'
}

# Run a set of tests
#
# usage: run_suite SUITE [TEST [...]]
#
# Positional parameter:
#   SUITE   path to a test suite
#   TEST    name of a test function in SUITE
#
# If no TEST is provided, every test function in SUITE will be run
run_suite()
{
    local suite="$1"
    local -a tests=("${@:2}")

    [ -f "$suite" ] || printf "%s: no such file or directory\n" "$suite"
    source "$suite" || return
    [[ ${#tests[@]} -eq 0 ]] && mapfile -t tests < <(list_tests)

    local logdir
    logdir="$(logdir "$suite")"

    mkdir -p "${logdir%/*}" || return
    mkdir "$logdir" || return

    (
    source "$harness"

    declare -F suite_teardown >/dev/null && trap -- "suite_teardown" EXIT
    if declare -F suite_setup >/dev/null; then
        suite_setup || exit
    fi

    local test_
    for test_ in "${tests[@]}"; do
        run_test "$test_" &> "$logdir"/"$test_".log || exit
    done
    )
}

# Print the summary of a test suite run
#
# usage: report SUITE
#
# Positional argument:
#   SUITE   path to a test suite
function report()
{
    local suite="$1"

    local logdir logfile
    logdir="$(logdir "$suite")"

    shopt -s nullglob
    for logfile in "$logdir"/*.log; do
        local test_="${logfile##*/}"
        test_="${test_%.log}"

        printf '%s\n' "${suite#./}:$test_"
        printf '%80s\n' "" | tr ' ' '-'
        cat "$logfile"
        printf '\n\n'

        case "$(tail -n 1 "$logfile" | cut -d" " -f1)" in
        Failed)
            failed+=1
            ;;
        Skipped)
            skipped+=1
            ;;
        esac
        total+=1
    done
}

################################################################################
#                                     CLI                                      #
################################################################################

usage()
{
    printf 'usage: %s [-h] [--] [DIRECTORY] [SUITE[:TEST] ...]

Discover and/or run a list of tests and test suites

Optional arguments:
    -h, --help  Display this message

Positionnal arguments:
    DIRECTORY   A directory under which to look for test suites
    SUITE       The name of a test suite (the path to the bash source file)
    TEST        The name of a test in the SUITE it is prefixed by

If neither a DIRECTORY nor a SUITE is provided %s will look for tests under the
current directory.
' "$PROGNAME" "$PROGNAME"
}

while [ $# -gt 0 ]; do
    if [ "${1:0:1}" == '-' ] && [ "${1:1:1}" != '-' ] && [ ${#1} -gt 2 ]; then
        set -- "${1:0:2}" "-${1:2}" "${@:2}"
    fi
    case "$1" in
    -h|--help)
        usage
        exit 0
        ;;
    -[^-]|--?*)
        usage
        printf '\n'
        printf 'unknown option %s\n' "$1"
        exit 64
        ;;
    --)
        shift
        ;&
    *)
        break
        ;;
    esac
    shift
done

# `tests' is indexed with names of test suites and its values are
# space-separated test names.
#
# Note that space can be use as a separator because the test names are actually
# shell function names, which cannot contain spaces.
declare -A tests
declare -a test_directories

# Perform only minimal checks of the arguments. The rest of the program will
# fail with meaningful error messages anyway.
for arg; do
    if [[ -d $arg ]]; then
        test_directories+=("$arg")
        continue
    fi

    if [[ -e $arg ]]; then
        # `arg' is test suite
        tests["$arg"]=
        continue
    fi

    # `arg' is SUITE:TEST
    suite="${arg%:*}"
    test_="${arg##*:}"

    # If the whole suite is already included, skip this argument
    [[ -v tests[$suite] ]] && [[ -z ${tests[$suite]} ]] && continue

    # If the test appears twice on the command line, it will be run twice
    # unless the test suite appears by itself later on the command line.
    tests[$suite]+="$test_ "
done

# Test suite discoverer
if [[ ${#test_directories[@]} -gt 0 ]] || [[ ${#tests[@]} -eq 0 ]]; then
    while IFS='' read -rd $'\0' suite; do
        tests[$suite]=
    done < <(find "${test_directories[@]:-.}" -name '.log' -prune \
                 -o -type f -name "${TEST_PATTERN#^}"'*' -print0)
fi

################################################################################
#                                    Main                                      #
################################################################################

# Export information for run_suite() and run_test()
printf -v run_id '%(%H-%M-%S)T-%s' -1 "$(uuidgen)"
declare -x run_id

here="$(dirname "$(readlink -m "${BASH_SOURCE[0]}")")"
declare -x harness="$here"/harness.sh

export -f list_tests logdir elapsed run_test run_suite

# Run tests
for suite in "${!tests[@]}"; do
    printf '%q %s\0' "$suite" "${tests[$suite]}"
done | xargs -0 -L 1 -r -P "$(nproc)" bash -c 'run_suite $@' bash

# Generate a report for each test suite
declare -i total skipped failed
for suite in "${!tests[@]}"; do
    report "$suite"
done

# Print a short summary line
printf "Ran %i tests" $total
[[ $total -gt 0 ]] && printf ': %i passed' $((total - failed - skipped))
[[ $skipped -gt 0 ]] && printf ', %i skipped' $skipped
[[ $failed -gt 0 ]] && printf ', %i failed' $failed
printf '\n'

[[ $failed -eq 0 ]]
